import java.util.*;

class CQStack
{
  public int maxSize; // size of stack array
  public int[] stackArray;
  public int top; // top of stack

  public CQStack(int s) // constructor
  {
    maxSize = s; // set array size
    stackArray = new int[maxSize]; // create array
    top = -1; // no items yet
  }
  public boolean isEmpty() // true if stack is empty
  {
    return (top == -1);
  }
  public boolean isFull() // true if stack is full
  {
    return (top == maxSize-1);
  }

  public void push(int j) // put item on top of stack
  {
    if(isFull())
    {
    }
    else
    {
      stackArray[++top] = j; // increment top, insert item
    }
  }
  public int pop() // take item from top of stack
  {
    if (isEmpty())
    {
      return -1;
    }
    else
    {
      int temp=stackArray[top--];
      return temp; // access item, decrement top
    }
  }
}

class Main
{/* isEmpty(), isFull(), push(int) and int pop() functions available on Stack. */

static int evalPostfix(CQStack s, String exp)
{
    for(int i=0;i<exp.length();i++){
      if(Character.isDigit(exp.charAt(i))== true){
        s.push(exp.charAt(i)-'0');
      }else if(exp.charAt(i)== ' '){
        continue;
      }
      else{
        int n2 = s.pop();
        int n1 = s.pop();
        if(exp.charAt(i)=='+'){
          int ans = n1 + n2;
             s.push(ans);
        }
        else if(exp.charAt(i)=='-'){
         int ans = n1 - n2;
            s.push(ans);
        }
        else if(exp.charAt(i)=='*'){
          int ans = n1*n2;
             s.push(ans);
        }
        else if(exp.charAt(i)=='/'){
         int ans = n1/n2;
            s.push(ans);
        }else if(exp.charAt(i)=='^'){
          int ans = 1;
          for(int j = 1;j<=n2;j++)
            ans = ans*n1;
          s.push(ans);
        }
    
      }
    }
  return s.pop();
}public static void main(String[] args)
  {
    CQStack theStack = new CQStack(100); // make new stack
    Scanner s=new Scanner(System.in);
    int t, n, q1, q2;
    String st;
    t = Integer.parseInt(s.nextLine());
    while(t>0)
    {
      st = s.nextLine();
      System.out.println(evalPostfix(theStack, st));
      t--;
    }
  }
}