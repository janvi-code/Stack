import java.util.*;

class CQStack
{
  public int maxSize; // size of stack array
  public int[] stackArray;
  public int top; // top of stack

  public CQStack(int s) // constructor
  {
    maxSize = s; // set array size
    stackArray = new int[maxSize]; // create array
    top = -1; // no items yet
  }
  public boolean isEmpty() // true if stack is empty
  {
    return (top == -1);
  }
  public boolean isFull() // true if stack is full
  {
    return (top == maxSize-1);
  }

  public void push(int j) // put item on top of stack
  {
    if(isFull())
    {
    }
    else
    {
      stackArray[++top] = j; // increment top, insert item
    }
  }
  public int pop() // take item from top of stack
  {
    if (isEmpty())
    {
      return -1;
    }
    else
    {
      int temp=stackArray[top--];
      return temp; // access item, decrement top
    }
  }
}

class Main
{/* isEmpty(), isFull(), push(), pop() are functions provided on stack. */

static int precedence(char ch){
  if(ch == '^')
     return 3;
  if(ch == '*' || ch == '/')
    return 2;
  if(ch == '+' || ch == '-')
    return 1;
  return -1;
}
static String infixToPostfix(CQStack s, String exp)
{
  exp = exp + ")";
  s.push('(');
  String str = "";
  for(int i=0;i<exp.length();i++){
    if(Character.isLetter(exp.charAt(i))==true){
      str = str + exp.charAt(i);
    }else if(exp.charAt(i)=='('){
      s.push('(');
    }else if(exp.charAt(i)==')'){
     char poup = (char)s.pop();
      while(poup != '(' && s.isEmpty()==false){
        str = str + poup;
        poup = (char) s.pop();
      }
    }else{
     char poup = (char) s.pop();
      while(precedence(poup) >= precedence(exp.charAt(i)) && s.isEmpty()==false){
        str = str + poup;
        poup = (char)s.pop();
      }
      s.push(poup);
      s.push(exp.charAt(i));  
    }
  }
  return str;
}public static void main(String[] args)
  {
    CQStack theStack = new CQStack(100); // make new stack
    Scanner s=new Scanner(System.in);
    int t, n, q1, q2;
    String st;
    t = Integer.parseInt(s.nextLine());
    while(t>0)
    {
      st = s.nextLine();
      st = infixToPostfix(theStack, st);
      System.out.println(st);
      t--;
    }
  }
}